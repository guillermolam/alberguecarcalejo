[workspace]
members = [
    "gateway/bff",
    "services/reviews-service",
    "services/booking-service",
    "services/validation-service",
    "services/notification-service",
    "services/info-on-arrival-service",
    "services/rate-limiter-service",
    "services/security-service",
    "services/location-service",
    "services/shared"
]
resolver = "2"

[workspace.metadata.scripts]
# Development
dev = "node dev-replit.js"
dev-frontend = "cd frontend && vite --host 0.0.0.0 --port 5173"

# Building
build = "cargo build --workspace --release && cd frontend && vite build"
build-frontend = "cd frontend && vite build"
build-wasm = "cargo build --workspace --target wasm32-unknown-unknown --release"

# Testing
test = "cargo test --workspace && cd frontend && vitest run && testcafe chrome tests/e2e/"
test-unit = "cargo test --workspace"
test-integration = "node tests/api/test-dni-api.js"
test-e2e = "testcafe chrome tests/e2e/"
test-ui = "cd frontend && vitest run"

# Linting and formatting
lint = "cargo clippy --workspace -- -D warnings && cd frontend && eslint . --ext .ts,.tsx"
lint-fix = "cargo clippy --workspace --fix --allow-dirty -- -D warnings && cd frontend && eslint . --ext .ts,.tsx --fix"
format = "cargo fmt --all && cd frontend && prettier --write \"src/**/*.{ts,tsx,js,jsx,json,css,md}\""
format-check = "cargo fmt --all -- --check && cd frontend && prettier --check \"src/**/*.{ts,tsx,js,jsx,json,css,md}\""

# Database (keeping Node.js tools for now)
db-generate = "cd frontend && drizzle-kit generate"
db-migrate = "cd frontend && drizzle-kit migrate"  
db-studio = "cd frontend && drizzle-kit studio"

# Development tools
storybook = "cd frontend && storybook dev -p 6006 --host 0.0.0.0"
clean = "cargo clean && rm -rf frontend/dist/ frontend/coverage/ frontend/.next/ frontend/node_modules/.cache/"

# Performance and monitoring
perf-lighthouse = "lighthouse http://0.0.0.0:5173 --output json --output-path ./tests/performance/lighthouse.json"
perf-k6 = "k6 run tests/performance/api-load.js"
health-check = "node tests/infrastructure/monitoring/health-check.js"

# Setup
setup-dev = "chmod +x tests/infrastructure/scripts/setup-dev.sh && ./tests/infrastructure/scripts/setup-dev.sh"

[workspace.metadata.aliases]
dev = "dev"
build = "build"
test = "test"
lint = "lint"
fmt = "format"

[workspace.metadata.env]
# Database Configuration
DATABASE_URL = { required = true, description = "PostgreSQL connection string" }
NEON_DATABASE_URL = { required = true, description = "Neon database connection string" }

# Auth0 Configuration
AUTH0_DOMAIN = { required = true, description = "Auth0 tenant domain" }
AUTH0_CLIENT_ID = { required = true, description = "Auth0 client ID" }
AUTH0_CLIENT_SECRET = { required = true, description = "Auth0 client secret" }
AUTH0_AUDIENCE = { required = false, description = "Auth0 API audience" }

# External Services
TWILIO_ACCOUNT_SID = { required = false, description = "Twilio account SID for SMS" }
TWILIO_AUTH_TOKEN = { required = false, description = "Twilio auth token" }
TELEGRAM_BOT_TOKEN = { required = false, description = "Telegram bot token" }
SMTP_HOST = { required = false, description = "SMTP server host" }
SMTP_PORT = { required = false, description = "SMTP server port" }
SMTP_USER = { required = false, description = "SMTP username" }
SMTP_PASS = { required = false, description = "SMTP password" }

# Encryption and Security
ENCRYPTION_KEY = { required = true, description = "AES-256-GCM encryption key" }
JWT_SECRET = { required = true, description = "JWT signing secret" }

# Service Configuration
RATE_LIMIT_REQUESTS = { required = false, description = "Rate limit requests per minute", default = "100" }
LOG_LEVEL = { required = false, description = "Application log level", default = "info" }

[workspace.dependencies]
tokio = { version = "1.0", features = ["full"] }
serde = { version = "1.0", features = ["derive"] }
serde_json = "1.0"
wasm-bindgen = "0.2"
wasm-bindgen-futures = "0.4"
js-sys = "0.3"
web-sys = "0.3"
console_error_panic_hook = "0.1"
wee_alloc = "0.4"
anyhow = "1.0"
thiserror = "1.0"
uuid = { version = "1.0", features = ["v4", "wasm-bindgen", "serde"] }
chrono = { version = "0.4", features = ["serde", "wasm-bindgen"] }
reqwest = { version = "0.11", features = ["json"] }
async-trait = "0.1"
axum = "0.7"
sqlx = { version = "0.7", features = ["postgres", "chrono", "uuid"] }