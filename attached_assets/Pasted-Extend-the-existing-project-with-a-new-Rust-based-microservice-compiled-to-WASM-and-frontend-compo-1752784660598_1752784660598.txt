Extend the existing project with a new Rust-based microservice (compiled to WASM) and frontend component, secured and orchestrated by the Backend-For-Frontend (BFF), with the following requirements:

✅ **Core feature**

- When the user uses the existing address autocomplete component (Google Maps Places Autocomplete),  
  automatically extract the detected country (`country.short_name` or `country.long_name`).
  
- Pass this country value to the BFF.

- The BFF calls the Rust microservice, which:
  - Calls the RESTCountries API (`https://restcountries.com/v3.1/name/{country}`).
  - Extracts:
    - `idd.root` and first `idd.suffix` → combined calling code (e.g., `+34`).
    - `flags.svg` or `flags.png` → flag image URL.

- Return this data to the frontend.

✅ **Frontend integration**

- Update the phone input UI:
  - Show the country flag (prepend image) as a visual reference **in a readonly prefix field** next to the phone number input.
  - Show the combined calling code (`+34`) as a separate, readonly HTML field next to the phone input.
  - Ensure the actual phone input only collects the **local part** (without country code),  
    because the country code will be merged later **at XML generation**.

✅ **Validation Fix**

- Update phone validation logic:
  - Stop validating the local number with the country code included.
  - Only validate:
    - Country code (from RESTCountries) → readonly field.
    - Local phone number (user input) → separate input field.

- Combine both later when generating the downstream XML payload.

✅ **Security**

- All RESTCountries API calls must be done server-side (Rust microservice), **never from the frontend**.

✅ **Tech stack**

- Frontend: Vite.js + TypeScript + Svelte.
- BFF: Rust WebAssembly function, exposed via orchestrating endpoints.
- Backend: Use existing BFF to secure and expose only the required country info.

✅ **Optional (nice-to-have)**

- Cache country data server-side to reduce API calls.
- Handle edge cases where no suffix exists (just use `idd.root`).
- Provide fallback flag icon if missing.

Final output:
- Rust microservice code.
- Svelte frontend updates.
- Updated BFF orchestration code.
- No external explanations; provide code only.
