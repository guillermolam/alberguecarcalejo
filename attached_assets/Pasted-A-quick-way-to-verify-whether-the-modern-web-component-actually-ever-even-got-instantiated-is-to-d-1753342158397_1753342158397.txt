A quick way to verify whether the ‚Äúmodern‚Äù web‚Äëcomponent actually ever even got instantiated is to drop a breakpoint or a simple console.log('üöÄ got here, appended element:', autocompleteElement) inside your initializeModernAutocomplete() just before you do

ts
Copy
Edit
containerRef.current!.appendChild(autocompleteElement);
My hunch is that one of two things is happening:

The new PlaceAutocompleteElement isn‚Äôt yet available in vweekly
The ‚Äúnew‚Äù PlaceAutocompleteElement API is still experimental and only available in the beta or alpha channel of the Maps JS API. By loading version: "weekly" you never actually get a window.google.maps.places.PlaceAutocompleteElement constructor, so your initializeModernAutocomplete() immediately throws and you silently fall back to the input‚Äëand‚Äëfetch logic.

Fix: switch your loader to the beta channel:

ts
Copy
Edit
const loader = new Loader({
  apiKey,
  version: "beta",
  libraries: ["places"],
});
You must pass at least one valid option object to the constructor
If you call new PlaceAutocompleteElement() with no { types, fields, componentRestrictions }, the element will exist but will refuse to render anything (and won‚Äôt emit a placeholder). In the examples Google always passes at least types: ["address"].

Fix:

ts
Copy
Edit
const autocompleteElement = new google.maps.places.PlaceAutocompleteElement({
  types: ["address"],
  fields: ["formatted_address", "address_components", "geometry", "place_id"],
  // optionally restrict to Spain if you only want ‚ÄúES‚Äù results:
  componentRestrictions: { country: ["es"] },
});
Putting it all together
ts
Copy
Edit
// ‚Ä¶
const loader = new Loader({
  apiKey,
  version: "beta",            // ‚Üê switch to beta/alpha for web‚Äëcomponent
  libraries: ["places"],
});

await loader.load();

// ‚Ä¶

// when creating the element:
const autocompleteElement = new google.maps.places.PlaceAutocompleteElement({
  types: ["address"],
  fields: ["formatted_address", "address_components", "geometry", "place_id"],
  // e.g. restrict to Spain:
  componentRestrictions: { country: ["es"] },
});
autocompleteElement.placeholder = placeholder;
// ‚Ä¶ style it ‚Ä¶
containerRef.current!.appendChild(autocompleteElement);
Once you use version: "beta" and pass a valid config object into the constructor, you should see the actual address‚Äëautocomplete box render. Let me know if that gets it showing up!